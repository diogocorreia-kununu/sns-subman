#!/usr/bin/env python

import boto3;
import logging
import json
import argparse
import re
import os

class DryRun:
    def create_queue(self, QueueName):
        logging.info("[dry-run] AWS sqs.create_queue %s", QueueName) 
        return { "url" : "http", "Attributes" : { "QueueArn" : "000" }}
    def create_topic(self, Name):
        logging.info("[dry-run] AWS sns.create_topic %s", Name) 
        return { "TopicArn" : "aws:000000000000:%s" % Name }
    def subscribe(self, TopicArn, Protocol, Endpoint):
        logging.info(
            "[dry-run] AWS sns.subscribe(TopicArn=%s, Protocol=%s, Endpoint=%s)" % (
                TopicArn, Protocol, Endpoint
            )
        )

class SnsSubMan:
    def __init__(this, config, endpoint_resolver, profile, dry_run=False):
        this.endpoint_resolver = endpoint_resolver
        this.profile = profile
        this.dry_run = dry_run

        if this.dry_run:
            this.sns = DryRun()
        else:
            this.sns = boto3.client('sns', endpoint_url=this.endpoint_resolver['sns'])
                

        for topicName in config['subscriptions']:
            this.create_topic(topicName, config['subscriptions'][topicName]),

    def create_topic(this, topicName, subscriptions):
        topicName = this.replace_vars(topicName)

        logging.info("create topic %s" % topicName)
        this.topic = this.sns.create_topic(Name=topicName)

        for subscription in subscriptions:
            protocol, options = subscription.popitem()
            getattr(this, "subscribe_%s" % protocol)(options)

    def subscribe_sqs(this, queueName):

        queueName = this.replace_vars(queueName)

        logging.info("subscribe to sqs queue %s at %s" % (queueName, this.endpoint_resolver['sqs']))
        
        if this.dry_run:
            sqs = DryRun()
        else:            
            sqs = boto3.client('sqs', endpoint_url=this.endpoint_resolver['sqs'])

        logging.info("create queue %s" % queueName)
        sqs.create_queue(QueueName=queueName) 
    
        if this.dry_run:
            queue = DryRun()
            endpoint="http://127.0.0.1"
        else:
            queue = boto3.resource('sqs', endpoint_url=this.endpoint_resolver['sqs']).get_queue_by_name(QueueName=queueName)
            endpoint=sqs.get_queue_attributes(QueueUrl=queue.url, AttributeNames=["QueueArn"])['Attributes']['QueueArn']


        this.sns.subscribe(
            TopicArn=this.topic['TopicArn'],
            Protocol='sqs',
            Endpoint=endpoint
        )

    def subscribe_http(this, endpoint, protocol='http'):
        endpoint_url = this.endpoint_resolver[endpoint[0]] + endpoint[1] 
        logging.info("subscribe to http endpoint %s at %s" % (endpoint, endpoint_url))

        this.sns.subscribe(
            TopicArn=this.topic['TopicArn'],
            Protocol=protocol,
            Endpoint=endpoint_url
        )

    def subscribe_https(this, endpoint):
        this.subscribe_http(endpoint, 'https')

    def replace_vars(this, name):
        return name.replace("%profile%", this.profile)

class NoneEndpointResolver:
    def __getitem__(*args):
        return None

class tEndpointResolver:

    def __init__(this, config):
        this.endpoints = config

    def __getitem__(this, name):    
        if not name in this.endpoints:
            return None
        return this.parse_env_vars(this.endpoints[name])

    def parse_env_vars(this, value):
      output = re.search('%env\(([A-Z0-9_]+)\)%', value)

      if output is not None:
          envvar = output.group(1)
          value = re.sub('%env\(%s\)', envvar, os.environ[envvar])

      return value

logging.basicConfig(level=logging.INFO)

parser = argparse.ArgumentParser(description='Manage SNS subscriptions')
parser.add_argument("config", help="The file that contains the topic and subscription informtion ", type=argparse.FileType('r'))
parser.add_argument("--profile", help="The profile to use", default="default")
parser.add_argument("--dry-run", help="Don't do anything, only show what would happen.", action='store_true')
args = parser.parse_args()

config = json.loads("".join(args.config.readlines()))

endpoint_resolver = NoneEndpointResolver()

if 'endpoints' in config:
    if not args.profile in config['endpoints']:
        raise Exception("Endpoint config with name %s does not exist in %s" % (args.profile, args.config))
    endpoint_resolver = tEndpointResolver(config['endpoints'][args.profile])

snsSubMan = SnsSubMan(config, endpoint_resolver, args.profile, dry_run=args.dry_run)

logging.info("All queues and subscriptions created")
